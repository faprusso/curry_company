# Libraries
import pandas as pd
import folium
import plotly_express as px
from haversine import haversine
from PIL import Image
import datetime
import streamlit as st
from streamlit_folium import folium_static

st.set_page_config(page_title='Vis칚o Empresa', page_icon='游늳', layout='wide')

# ---------------------------
# Fun칞칫es
# ---------------------------

# Fun칞칚o de limpeza dos dados
def clean_code(df1):
    """Esta fun칞칚o tem a responsabilidade de limpar o dataframe
        Tipos de limpeza:
        1. Remo칞칚o de dados NaN
        2. Mudan칞a do tipo da coluna de dados
        3. Remo칞칚o dos espa칞os das vari치veis de texto
        4. Formata칞칚o da coluna de datas
        5. Limpeza da coluna de tempo (remo칞칚o do texto da vari치vel)

        Input: Dataframe
        Output: Dataframe
    """
    # Tratando a base
    # Convertendo idade de texto para int
    linhas_selecionadas = df1['Delivery_person_Age'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :].copy()
    df1['Delivery_person_Age'] = df1['Delivery_person_Age'].astype(int)

    # tirando o NaN do Road_traffic_density
    linhas_selecionadas = df1['Road_traffic_density'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :].copy()

    # tirando o NaN do City
    linhas_selecionadas = df1['City'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :].copy()

    # tirando o NaN do Festival
    linhas_selecionadas = df1['Festival'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :].copy()

    # Convertendo a coluna ratings de texto para n칰mero decimal
    df1['Delivery_person_Ratings'] = df1['Delivery_person_Ratings'].astype(
        float)

    # Convertendo a coluna order_date de texto para data
    df1['Order_Date'] = pd.to_datetime(df1['Order_Date'], format='%d-%m-%Y')

    # Convertendo multiple_deliveries de texto para int
    linhas_selecionadas = df1['multiple_deliveries'] != 'NaN '
    df1 = df1.loc[linhas_selecionadas, :].copy()
    df1['multiple_deliveries'] = df1['multiple_deliveries'].astype(int)

    # Comando para remover o texte de n칰meros
    df1['Time_taken(min)'] = df1['Time_taken(min)'].apply(
        lambda x: x.split('(min) ')[1])
    df1['Time_taken(min)'] = df1['Time_taken(min)'].astype(int)

    # removendo os espa칞os dentro de strings/texto/object
    df1.loc[:, 'ID'] = df1.loc[:, 'ID'].str.strip()
    df1.loc[:, 'Road_traffic_density'] = df1.loc[:,
                                                 'Road_traffic_density'].str.strip()
    df1.loc[:, 'Type_of_order'] = df1.loc[:, 'Type_of_order'].str.strip()
    df1.loc[:, 'Type_of_vehicle'] = df1.loc[:, 'Type_of_vehicle'].str.strip()
    df1.loc[:, 'City'] = df1.loc[:, 'City'].str.strip()
    df1.loc[:, 'Festival'] = df1.loc[:, 'Festival'].str.strip()

    return df1


def order_metric(df1):
    """Fun칞칚o que calcula a quantidade de pedidos di치rias a partir do dataframe"""
    df_aux = df1.loc[:, ['ID', 'Order_Date']].groupby(
        'Order_Date').count().reset_index()

    # desenhar gr치fico de barras
    fig = px.bar(df_aux, x='Order_Date', y='ID')
    return fig


def traffic_order_share(df1):
    """Esta fun칞칚o calcula a quantidade de pedidos por densidade de tr치fego"""
    df_aux = (df1.loc[:, ['ID', 'Road_traffic_density']]
              .groupby('Road_traffic_density')
              .count()
              .reset_index())
    # Criando coluna de representatividade
    df_aux['entregas_perc'] = df_aux['ID'] / df_aux['ID'].sum()

    # Gr치fico de pizza
    fig = px.pie(df_aux, values='entregas_perc', names='Road_traffic_density')
    # Criando coluna de representatividade
    df_aux['entregas_perc'] = df_aux['ID'] / df_aux['ID'].sum()

    # Gr치fico de pizza
    fig = px.pie(df_aux, values='entregas_perc', names='Road_traffic_density')

    return fig


def traffic_order_city(df1):
    """ Esta fun칞칚o calcula a quantidade de pedidos por cidade e tipo de tr치fego"""
    df_aux = (df1.loc[:, ['ID', 'City', 'Road_traffic_density']]
              .groupby(['City', 'Road_traffic_density'])
              .count()
              .reset_index())

    # Gr치fico de bolhas
    fig = px.scatter(df_aux, x='City', y='Road_traffic_density',
                     size='ID', color='City')
    return fig


def order_by_week(df1):
    """Esta fun칞칚o calcula a a quantidade de pedidos realizados por semana"""
    # Criando a coluna semana
    df1['week_of_year'] = df1['Order_Date'].dt.strftime('%U')

    # C치lculo da quantidade de pedidos por semana
    df_aux = df1.loc[:, ['ID', 'week_of_year']].groupby(
        'week_of_year').count().reset_index()

    # Criando o gr치fico de linhas
    fig = px.line(df_aux, x='week_of_year', y='ID')

    return fig


def order_share_by_week(df1):
    """Esta fun칞칚o calcula a quantidade m칠dia de pedidos por entregadores 칰nicos e mostra a vis칚o por semana do ano """
    # C치lculo da quantidade de pedidos por semana
    df_aux01 = df1.loc[:, ['ID', 'week_of_year']].groupby(
        'week_of_year').count().reset_index()

    # Quantidade de entregadores 칰nicos por semana
    df_aux02 = df1.loc[:, ['Delivery_person_ID', 'week_of_year']
                       ].groupby('week_of_year').nunique().reset_index()

    df_aux = pd.merge(df_aux01, df_aux02, how='inner')

    df_aux['order_by_delivery'] = df_aux['ID'] / df_aux['Delivery_person_ID']

    # Gr치fico de linhas
    fig = px.line(df_aux, x='week_of_year', y='order_by_delivery')

    return fig


def country_maps(df1):
    """Esta fun칞칚o cria um gr치fico, plotando a localiza칞칚o dos locais de entrega por meio do c치lculo da mediana da localiza칞칚o
     Os pontos do mapa s칚o mostrados indicando a Cidade e a densidade de tr치fego.
       """
    # Mediana da latitude e longitude agrupadas por cidade e tipo de tr치fego
    df_aux = (df1.loc[:, ['City', 'Road_traffic_density', 'Delivery_location_latitude', 'Delivery_location_longitude']]
              .groupby(['City', 'Road_traffic_density'])
              .median()
              .reset_index())
    # Ciando mapa com folium
    map = folium.Map()
    for index, location_info in df_aux.iterrows():
        folium.Marker([
            location_info['Delivery_location_latitude'],
            location_info['Delivery_location_longitude']
        ], popup=location_info[['City', 'Road_traffic_density']]).add_to(map)
    folium_static(map, width=1024, height=600)

# --------------------------- In칤cio da estrutura l칩gica do c칩digo ---------------------------


# ---------------------------
# Import Dataset
# ---------------------------
df = pd.read_csv('train.csv')
# ---------------------------
# Limpando dados
# ---------------------------
df1 = clean_code(df)

# Vis칚o Empresa
st.header('Marketplace - Vis칚o Cliente')

# =====================================
# Barra Lateral
# =====================================

# Logo Cury Company da barra lateral
image_path = 'food_delivery.png'
image = Image.open(image_path)
# Markdown Slogan Cury Company
st.sidebar.image(image,  width=150)
st.sidebar.markdown('# :orange[**Cury Company**]')
st.sidebar.markdown('### Fastest Delivery in Town')
st.sidebar.markdown("""---""")

# Filtro Data
date_slider = st.sidebar.slider(
    'Selecione at칠 qual data',
    value=datetime.datetime(2022, 4, 13),
    min_value=datetime.datetime(2022, 2, 11),
    max_value=datetime.datetime(2022, 4, 6),
    format='DD-MM-YYYY'
)
# Filtro Condi칞칫es de tr칙nsito
traffic_options = st.sidebar.multiselect(
    'Quais as condi칞칫es de tr칙nsito',
    ['Low', 'Medium', 'High', 'Jam'],
    default=['Low', 'Medium', 'High', 'Jam']
)
# Aplica칞칚o dos filtros de data e tr치fego
linhas_selecionadas = df1['Order_Date'] < date_slider
df1 = df1.loc[linhas_selecionadas, :]

linhas_selecionadas = df1['Road_traffic_density'].isin(traffic_options)
df1 = df1.loc[linhas_selecionadas, :]

# =====================================
# Layout no Streamlit
# =====================================

tab1, tab2, tab3 = st.tabs(
    ['Vis칚o Gerencial', 'Vis칚o T치tica', 'Vis칚o Geogr치fica'])

with tab1:
    with st.container():
        # Order Metric
        fig = order_metric(df1)
        st.markdown('### Orders by day')
        st.plotly_chart(fig, use_conatiner_width=True)

    with st.container():
        col1, col2 = st.columns(2)

        with col1:
            fig = traffic_order_share(df1)
            st.markdown('### Traffic Order Share')
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown('### Traffic Order City')
            fig = traffic_order_city(df1)
            st.plotly_chart(fig, use_container_width=True)

with tab2:
    with st.container():
        st.markdown('### Order by Week')
        fig = order_by_week(df1)
        st.plotly_chart(fig, use_container_width=True)

    with st.container():
        st.markdown('### Order Share by Week')
        fig = order_share_by_week(df1)
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    st.markdown('### Country Maps')
    country_maps(df1)